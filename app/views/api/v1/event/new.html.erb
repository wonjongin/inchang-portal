<%# unless @diary.events == nil %>
<%# @diary.events.each do |event| %>
<%#= form_with model: event, url: '/api/v1/event/create', method: :patch do |form| %>
<%#= form.label :start_time %>
<%#= form.time_field :start_time, value = event.start_time %>
<%#= form.label :end_time %>
<%#= form.time_field :end_time, value = event.end_time %>
<%#= form.label :desc %>
<%#= form.text_field :desc, value = "#{event.desc}" %>
<%#= form.submit "Edit action" %>
<%# end %>
<%#= button_to "Delete this action", url: "/api/v1/event/delete/#{event.id}", method: :delete %>
<!--    <br>-->
<%# end %>
<%# end %>

<h3>업무내용 추가 및 수정</h3>
<br>
<%= form_with url: '/api/v1/event/create', method: :post, class: "input-group" do |form| %>
  <%#= form.time_field :start_time, class: "form-control", placeholder: "시작 시각", tabindex: "1"%>
  <%#= form.time_field :end_time, class: "form-control", placeholder: "종료 시각", tabindex: "2" %>
  <%= form.text_field :start_time, class: "form-control", placeholder: "09:40", tabindex: "1", id: "timepicker 1" %>
  <%= form.text_field :end_time, class: "form-control", placeholder: "16:30", tabindex: "2", id: "timepicker 2" %>
  <%= form.text_field :desc, class: "form-control", placeholder: "업무 내용", tabindex: "3"%>
  <%= form.hidden_field :diary_id, value: @diary.id %>
  <%= form.submit class: "btn btn-primary", value: "추가" %>
<% end %>

<br>
<br>
<% @diary.events.each_with_index do |event, index| %>
  <div id="event <%= event.id %>">
    <%= form_tag "/api/v1/event/update/#{@diary.id}/#{event.id}", method: :patch, class: "input-group mb-0", local: true, data: { turbo: "false" } do %>
      <%#= label_tag :start_time %>
      <%# <%= time_field_tag :start_time, value = event.start_time.strftime('%H:%M'), class: "form-control", tabindex: "#{4+3*index}"  %> 
      <%#= label_tag :end_time %>
      <%# <%= time_field_tag :end_time, value = event.end_time.time.strftime('%H:%M'), class: "form-control", tabindex: "#{4+3*index+1}" %>
      
      <%= text_field_tag :start_time, "#{event.start_time.strftime('%H:%M')}", class: "form-control", tabindex: "#{4+3*index}" %>
      <%= text_field_tag :end_time, "#{event.end_time.strftime('%H:%M')}", class: "form-control", tabindex: "#{4+3*index+1}" %>
      <%#= label_tag :desc %>
      <%= text_field_tag :desc, value = "#{event.desc}", class: "form-control", tabindex: "#{4+3*index+2}" %>
      <%= submit_tag "수정", class: "btn btn-primary" %>
      <%= button_tag "삭제", type: :button, onclick: "deleteEvent(#{event.id}, #{@diary.id})", class: "btn btn-primary", id: "deleteBtn" %>
    <% end %>
    <%#= button_to "삭제", "/api/v1/event/delete/#{event.id}", method: :delete, class: "btn btn-primary" %>
    <br>
  </div>
<% end %>
<%= button_to "작성완료", "/api/v1/diary/detail/#{@diary.id}", method: :get, class: "btn btn-primary" %>

<script src="https://unpkg.com/imask"></script>
<script>
    // $('#deleteBtn').on("click", () => async {
    //     const res = await fetch("/api/v1/event/delete/" + id.toString(), {
    //         method: "DELETE",
    //     });
    //     console.log(res);
    // })

    function csrfToken() {
        const meta = document.querySelector('meta[name=csrf-token]');
        const token = meta && meta.getAttribute('content');

        return token ?? false;
    }

    async function deleteEvent(id, diary_id) {
        const res = await fetch("/api/v1/event/delete/" + diary_id.toString() + "/" + id.toString(), {
            method: "DELETE",
            headers: {
                'X-CSRF-Token': csrfToken(),
            }
        });
        if (res.status == 200) {
            const dh = document.getElementById("event " + id.toString());
            dh.remove();
        }
    }


    var element1 = document.getElementById('timepicker 1');
    var element2 = document.getElementById('timepicker 2');
    var maskOptions = {
        mask: 'HH:mm',
        blocks : {
            HH: {
                mask: IMask.MaskedRange,
                from: 0,
                to: 23,
                maxLength: 2,
            },
            mm: {
                mask: IMask.MaskedRange,
                from: 0,
                to: 59,
                maxLength: 2,
            }
        }
    };
    var mask1 = IMask(element1, maskOptions);
    var mask2 = IMask(element2, maskOptions);

    // window.addEventListener("DOMContentLoaded", 
    
    function enterToTab(){
      const inputs = document.querySelectorAll("input,select");
        for (let i = 0 ; i < inputs.length; i++) {
            inputs[i].addEventListener("keypress", function(e){
                if (e.keyCode == 13) {
                    e.preventDefault();
                    var nextInput = document.querySelectorAll('[tabIndex="' + (this.tabIndex + 1) + '"]');
                    if (nextInput.length === 0) {
                        // Run submit function here
                        alert("다음 입력란이 없어요!");
                    } else {
                        nextInput[0].focus();
                    }
                }
            })
        }
    }

    enterToTab()

    // $(document).ready(function () {
    //     $(window).keydown(function (event) {
    //         console.log(event.keyCode);
    //         if (event.keyCode == 13) {
    //             event.preventDefault();
    //             return false;
    //         }
    //     });
    // });


    // $('body').on('keydown', 'input, select', function(e) {
    //     if (e.key === "Enter") {
    //         let self = $(this), form = self.parents('form:eq(0)'), focusable, next;
    //         focusable = form.find("input,a,select,button,textarea").filter(':visible');
    //         next = focusable.eq(focusable.index(this)+1);
    //         if (next.length) {
    //             next.focus();
    //         } else {
    //             form.submit();
    //         }
    //         return false;
    //     }
    // });
</script>
